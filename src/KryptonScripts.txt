{
    myAge = 20;
    lo = 0;
    hi = 100;
    nTurns = 1;
    while ( lo < hi ) {
        mid = (lo + hi) / 2;
        if ( mid == myAge) {
            print ("Your age is " + mid + ", predicted in " + nTurns + " turns");
            lo = hi;
        } else if (mid < myAge) {
            lo = mid + 1;
            nTurns = nTurns + 1;
            print ("Current mid = " + mid);
        } else {
            hi = mid - 1;
            nTurns = nTurns + 1;
            print ("Current mid = " + mid);

        }
    }

}


myAge = 2;
if (myAge < 2) {
    print ("Not that old");
} else {
    print ("Very very old");
}

# printing * patterns
# pattern1
# *
# **
# ***

nRows = 3;
iRow = 1;

while (iRow <= nRows) {
    iCol = 1;
    print(" ");

    curRow = "";

    while (iCol <= iRow) {
        curRow = curRow + "* ";
        iCol = iCol + 1;
    }

    print(curRow);
    iRow = iRow + 1;
}



a = 0;
b = 1;
i = 2;
while ( i < 10) {
    print(b);
    b = a + b;
    a = b - a;
    i = i + 1;
}


{
    x = 1;
    if ( x == 1) {
        print ("1");
    }
}



#nested ifs check
x = 1;
if ( x > 0) {
    print ("Greater than 0");
    if ( x < 5) {
        print("Less than 5");
    }
} else {
    print("Less than equal to 0");
}



### Print second Star Pattern
        *
       ***
      ***** for n = 3

nRows = 3;
iRow = 0;

while (iRow < nRows) {

    curRow = "";

    # First print the spaces #
    nSpaces = nRows - iRow - 1;
    iSpace = 0;
    while (iSpace < nSpaces) {
        curRow = curRow + " ";
        iSpace = iSpace + 1;
    }

    # Now add the stars in the row #
    nStars = 2 * iRow + 1;
    iStar = 0;
    while (iStar < nStars) {
        curRow = curRow + "* ";
        iStar = iStar + 1;
    }

    # print the row finally #
    print(curRow);
    iRow = iRow + 1;
}





# for Exp in krypton #
for (i = 0; i < 3; i = i + 1) {
    print ("x");
}


nRows = 3;
for (iRow = 0; iRow < nRows; iRow = iRow + 1) {
    curRow = "";
    for(iCol = 0; iCol <= iRow; iCol = iCol + 1) {
        curRow = curRow + "* ";
    }
    print(curRow);
}


nRows = 3;
for (iRow = 0; iRow < nRows; iRow = iRow + 1) {
    curRow = "";
    for(iCol = 0; iCol <= iRow; iCol = iCol + 1) {
        curRow = curRow + "* ";
    }
    print(curRow);
}

for( i = 0; i < 100; i = i + 1) {
    if(i%2 == 0)
        print("" + i + " is even");
    else
        print("" + i + " is odd");

}


###### prime numbers between 1 to 100 krypton
def printPrimes(upperBound) {
    print("");
    for(i = 2; i <= upperBound; i = i + 1) {

        isPrimeI = true;

        for(j = 2; j * j <= i; j = j + 1) {
             if( i % j == 0) {
                isPrimeI = false;
             }
        }

        if(isPrimeI) {
            print("" + i + " is a prime number");
        }
    }
}




printPrimes();

def printX() {
    print("x");
}


number = 10;
def factorialOfNumber() {
    fact = 1;

    def prod() {
        for(i = 1; i <= number; i = i + 1) {
            fact = fact * i;
        }
    }

    prod();

    print("Factorial of " + number + " is " + fact);
}

factorialOfNumber();



######### function with args ################
def factorial(n) {
    fact = 1;

    for(i = 1; i <= n; i = i + 1) {
        fact = fact * i;
    }

    print(fact);
}



def isSatisfying(condFunction, value) {
    if(condFunction(value)) {
        print("Condition satisfied");
    } else {
        print("Condition not satisfied");
    }
}


def fibonacci(nTurns) {
    result = "";
    result = result + "0 1 ";
    a = 0;
    b = 1;
    for(iTurn = 2; iTurn < nTurns; iTurn = iTurn + 1) {
            b = a + b;
            a = b - a;
            result = result + b + " ";
    }

    print(result);
}

def factorial(n) {

    # find product of first natural numbers using this function #
    def prodNatural(n) {
        resProd = 1;

        if( n > 1 ) {
            resProd = n * prodNatural(n-1);
        }

        return resProd;
    }

    return prodNatural(n);
}


def fibonacci(n) {
    res = 1;
    if ( n < 2 ) {
        res = n;
    } else {
        res = fibonacci(n-1) + fibonacci(n-2);
    }
    return res;
}


# print square of first n natural numbers #
def printSquares(squareFunc, n) {
    for(i = 1; i <= n; i = i + 1) {
        print("Square of " + i + " is " + squareFunc(i));
    }
}

def square(n) {
    return n * n;
}

############3 higher order functions krypton ##########
def prodNTimes(n) {
    def func(x) {
        res = 1;
        for(i = 1; i <= n; i = i + 1) {
            res = res * x;
        }
        return res;
    }

    return func;
}

cube = prodNTimes(3);
square = prodNTimes(2);

cube(6);
cube(3);

square(2);
square(4);

#########################################################
def countTo(to) {

    def counter(from, to) {
        res = " ";
        for( i = from; i <= to; i = i + 1) {
            res = res + i + " ";
        }
        return res;
    }

    res = "";
    res = "Invalid value passed in the function";
    if (to >= 1) {
        res = counter(1, to);
    }

    return res;
}


########################################################
# apply func to first n natural numbers and reduce to acc
def reduce(func, acc, n) {

    for(i = 1; i <= n; i = i + 1) {
        acc = func(acc, i);
    }
    return acc;
}



reduce(lambda(acc, i) { return acc + i; }, 0, 6);

#########################################################
def filter(func, n) {
    res = "";

    for(i = 1; i <=n; i = i + 1) {
        funRes = func(i);
        if(func(i)) {
            res = res + i + ", ";
        }
    }

    return res;
}

oddNumbers = filter(lambda(x) { return x % 2 != 0; }, 50);

evenFunc = lambda(x) { return x % 2 == 0; }

filter(evenFunc, 50);


#######################
def prodNTimes(n) {
    return lambda(x) {
            res = 1;
            for(i = 1; i <= n; i = i + 1) {
                res = res * x;
            }
            return res;
    };
}

##############################
def printList(lst, len) {
    res = "";
    for(i = 0; i < len; i = i + 1) {
        res = res + lst[i] + ", ";
    }
    print(res);
}
def map(func, list, lenList) {
    result = [];

    for(i = 0; i < lenList; i = i + 1) {
        result = result + func(list[i]);
    }

    print("Initial list");
    printList(list, lenList);

    print("FInal list");
    printList(result, lenList);
}

map(lambda(x) { return x + 1; }, [1, 2, 3], 3);


def filter(func, list, lenList) {
    result = [];
    resultLen = 0;

    for(i = 0; i < lenList; i = i + 1) {
        if(func(list[i])) {
            result = result + list[i];
            resultLen = resultLen + 1;
        }
    }

    print("Initial list");
    printList(list, lenList);

    print("FInal list");
    printList(result, resultLen);

}

filter(lambda(x) { return x % 2 == 0; }, [1, 2, 3, 4], 4);

##########################################
# last higher order function --> reduce
def reduce(func, list, acc, lenList) {
    result = acc;
    for(i = 0; i < lenList; i = i + 1) {
        result = func(result, list[i]);
    }

    print("Initial list");
    printList(list, lenList);

    print("final result");
    print(result);

}

reduce(lambda(acc, x) { return acc + x; }, [1, 2, 3], 0, 3);

############################
x = 3;
if( x > 3 ) {
    print("greater");
} else {
    print("not greater");
}


#########################################
######## fibonacci dp #############
def factorialDP(n) {
    dp = [-1] * (n + 1);

    dp[0] = 1;
    dp[1] = 1;

    for(i = 2; i <= n; i = i + 1) {
        dp[i] = i * dp[i-1];
    }

    return dp[n];
}


def fibonacci(n) {
    dp = [0] * (n + 1);

    dp[0] = dp[1] = 1;

    for(i = 2; i <= n; i = i + 1) {
        dp[i] = dp[i-1] + dp[i-2];
    }

    return dp[n];
}

# count occurence of each element in the list
def countOccurence(list, listLen) {
    dp = [0] * (listLen + 1);

    for(i = 0; i < listLen; i = i + 1) {
        dp[list[i]] = dp[list[i]] + 1;
    }

    return dp;

}



def pow(x, k) {
    res = 1; 
    if(k == 0) {
        res = 1;
    }
    else if(k == 1) {
        res = x;
    }
    else {
        res = pow(x, k / 2);
        res = res * res;

        if(k%2 != 0) {
            res = res + res;
        }
    }
    return res;


}

def powDP(x, k) {
    dp = [1] * (k + 1);
    dp[1] = x;
    for(i = 2; i <= k; i = i + 1) {
        res = dp[i/2] * dp[i/2];
        if(i % 2 != 0) {
            res = res * x;
        }

        dp[i] = res;
    }

    return dp[k];
}
// dp[2] = dp[1] * dp[1] * printX
// 27
// dp[2] = dp[1] * dp[1]
// dp[3] = dp[1] * dp[2] 

def pow(x, n) {
    dp = [1] * n;
    return dp[n];
}

############## bubble sort program in krypton #########

def sort(lst, len) {

    def swap(first, second) {
        temp = lst[first];
        lst[first] = lst[second];
        lst[second] = temp;
    }

    printList(lst, len);

    for(i = 0; i < len - 1; i = i + 1) {

        for(j = 1; j < len; j = j + 1) {

            if(lst[j] < lst[j-1]) {
                swap(j, j - 1);
            }
            
        }

    }

    printList(lst, len);
    

}



def printList(lst, len) {
    res = "";
    for(i = 0; i < len; i = i + 1) {
        res = res + lst[i] + ", ";
    }
    print(res);
}




def sublist(lst, start, end) {
    res = [];

    for(i = start; i < end; i = i + 1) {
        res = res + lst[i];
    }

    return res;
}


def merge(leftList, lLen, rightList, rLen) {
    res = [];

    if(lLen == 0) {
        res = rightList;
    }
    else if(rLen == 0) {
        res = leftList;
    }
    else {
        if(leftList[0] < rightList[0]) {
            res = res + leftList[0] + merge(sublist(leftList, 1, lLen), lLen - 1, rightList, rLen);
        }
        else 
        {
            res = res + rightList[0] + merge(leftList, lLen, sublist(rightList, 1, rLen), rLen - 1);
        }
    }

    return res;

}


def mergeSort(lst, len) {

    def mergeSortHelper(lst, start, end) {
        res = [];
        if(start == end) {
            res = res + lst[start];
        }
        else {
            mid = start + (end - start) / 2;

            leftSorted = mergeSortHelper(lst, start, mid);

            lLen = mid - start + 1;

            rightSorted = mergeSortHelper(lst, mid + 1, end);

            rLen = end - mid;

            res = merge(leftSorted, lLen, rightSorted, rLen);
        }

        return res;

    }


    start = 0;
    end = len - 1;
    return mergeSortHelper(lst, start, end);

}


printList(mergeSort([1, 2, 3, 2, 1, 5, 3], 7), 7);

######## def binary search ############
def binarySearch(lst, len, key) {

    def helper(start, end) {
        res = -1;

        if(start <= end) {
            mid = start + (end - start) / 2;

            if(lst[mid] == key) {
                res = mid;
            }
            else if(lst[mid] > key) {
                res = helper(start, mid - 1);
            }
            else {
                res = helper(mid + 1, end);
            }
        }


        return res;

    }


    start = 0;
    end = len - 1;


    locationKey = helper(start, end);
    if(locationKey == -1) {
        print("Oops the key is not present in the list ");
    }
    else {
        print("Element " + key + " is present at location " + locationKey);
    }

}




################# language breaking on these statements #######################3
if ( x < 4 ) {
    $ = 4;
}