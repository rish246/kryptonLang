class Complex {
	def init(real, imag) {
		this.real = real;
		this.imag = imag;
	}

	def mod() {
		return sqrt(this.real * this.real + this.imag * this.imag);
	}

	def add(other) {
		result_real = this.real + other.real;
		result_imag = this.imag + other.imag;
		return new Complex(result_real, result_imag);
	}
	


	def substract(other) {
		neg_other = Complex.negate(other);
		return this.add(neg_other);

	}
	
	def prod(other) {
		# print("prod"); # problem is with creating instances in our method
		return new Complex(1, 1); # Found problem - > Creating
	}

	def toString() {
		return "(" + this.real + " + i" + this.imag + ")";
	}	

	################# Static methods #######################

	def negate(complex) {
		return new Complex(-complex.real, -complex.imag);
		
	}	

};

### It's wrong ... but it will work for now ###
def sqrt(num) {
	result = 1;
	for(i = 1; i * i <= num; i = i + 1) {
		result = i;
	}
	return result;
}


def main() {
	complex1 = new Complex(3, 4);
	
	complex2 = new Complex(-1, 3);

	print("Sum");
	sumTwo = complex1.add(complex2); # complex -> Should be bound to something.. Then only we will be able to access from dreamWeaver
	print(sumTwo.toString());


}
	

main();
